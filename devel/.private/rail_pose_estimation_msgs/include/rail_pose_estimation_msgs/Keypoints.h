// Generated by gencpp from file rail_pose_estimation_msgs/Keypoints.msg
// DO NOT EDIT!


#ifndef RAIL_POSE_ESTIMATION_MSGS_MESSAGE_KEYPOINTS_H
#define RAIL_POSE_ESTIMATION_MSGS_MESSAGE_KEYPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rail_pose_estimation_msgs
{
template <class ContainerAllocator>
struct Keypoints_
{
  typedef Keypoints_<ContainerAllocator> Type;

  Keypoints_()
    : neck_x(0.0)
    , neck_y(0.0)
    , nose_x(0.0)
    , nose_y(0.0)
    , right_shoulder_x(0.0)
    , right_shoulder_y(0.0)
    , left_shoulder_x(0.0)
    , left_shoulder_y(0.0)
    , right_elbow_x(0.0)
    , right_elbow_y(0.0)
    , left_elbow_x(0.0)
    , left_elbow_y(0.0)
    , right_wrist_x(0.0)
    , right_wrist_y(0.0)
    , left_wrist_x(0.0)
    , left_wrist_y(0.0)
    , right_hip_x(0.0)
    , right_hip_y(0.0)
    , left_hip_x(0.0)
    , left_hip_y(0.0)
    , right_knee_x(0.0)
    , right_knee_y(0.0)
    , left_knee_x(0.0)
    , left_knee_y(0.0)
    , right_ankle_x(0.0)
    , right_ankle_y(0.0)
    , left_ankle_x(0.0)
    , left_ankle_y(0.0)
    , right_eye_x(0.0)
    , right_eye_y(0.0)
    , left_eye_x(0.0)
    , left_eye_y(0.0)
    , right_ear_x(0.0)
    , right_ear_y(0.0)
    , left_ear_x(0.0)
    , left_ear_y(0.0)  {
    }
  Keypoints_(const ContainerAllocator& _alloc)
    : neck_x(0.0)
    , neck_y(0.0)
    , nose_x(0.0)
    , nose_y(0.0)
    , right_shoulder_x(0.0)
    , right_shoulder_y(0.0)
    , left_shoulder_x(0.0)
    , left_shoulder_y(0.0)
    , right_elbow_x(0.0)
    , right_elbow_y(0.0)
    , left_elbow_x(0.0)
    , left_elbow_y(0.0)
    , right_wrist_x(0.0)
    , right_wrist_y(0.0)
    , left_wrist_x(0.0)
    , left_wrist_y(0.0)
    , right_hip_x(0.0)
    , right_hip_y(0.0)
    , left_hip_x(0.0)
    , left_hip_y(0.0)
    , right_knee_x(0.0)
    , right_knee_y(0.0)
    , left_knee_x(0.0)
    , left_knee_y(0.0)
    , right_ankle_x(0.0)
    , right_ankle_y(0.0)
    , left_ankle_x(0.0)
    , left_ankle_y(0.0)
    , right_eye_x(0.0)
    , right_eye_y(0.0)
    , left_eye_x(0.0)
    , left_eye_y(0.0)
    , right_ear_x(0.0)
    , right_ear_y(0.0)
    , left_ear_x(0.0)
    , left_ear_y(0.0)  {
  (void)_alloc;
    }



   typedef float _neck_x_type;
  _neck_x_type neck_x;

   typedef float _neck_y_type;
  _neck_y_type neck_y;

   typedef float _nose_x_type;
  _nose_x_type nose_x;

   typedef float _nose_y_type;
  _nose_y_type nose_y;

   typedef float _right_shoulder_x_type;
  _right_shoulder_x_type right_shoulder_x;

   typedef float _right_shoulder_y_type;
  _right_shoulder_y_type right_shoulder_y;

   typedef float _left_shoulder_x_type;
  _left_shoulder_x_type left_shoulder_x;

   typedef float _left_shoulder_y_type;
  _left_shoulder_y_type left_shoulder_y;

   typedef float _right_elbow_x_type;
  _right_elbow_x_type right_elbow_x;

   typedef float _right_elbow_y_type;
  _right_elbow_y_type right_elbow_y;

   typedef float _left_elbow_x_type;
  _left_elbow_x_type left_elbow_x;

   typedef float _left_elbow_y_type;
  _left_elbow_y_type left_elbow_y;

   typedef float _right_wrist_x_type;
  _right_wrist_x_type right_wrist_x;

   typedef float _right_wrist_y_type;
  _right_wrist_y_type right_wrist_y;

   typedef float _left_wrist_x_type;
  _left_wrist_x_type left_wrist_x;

   typedef float _left_wrist_y_type;
  _left_wrist_y_type left_wrist_y;

   typedef float _right_hip_x_type;
  _right_hip_x_type right_hip_x;

   typedef float _right_hip_y_type;
  _right_hip_y_type right_hip_y;

   typedef float _left_hip_x_type;
  _left_hip_x_type left_hip_x;

   typedef float _left_hip_y_type;
  _left_hip_y_type left_hip_y;

   typedef float _right_knee_x_type;
  _right_knee_x_type right_knee_x;

   typedef float _right_knee_y_type;
  _right_knee_y_type right_knee_y;

   typedef float _left_knee_x_type;
  _left_knee_x_type left_knee_x;

   typedef float _left_knee_y_type;
  _left_knee_y_type left_knee_y;

   typedef float _right_ankle_x_type;
  _right_ankle_x_type right_ankle_x;

   typedef float _right_ankle_y_type;
  _right_ankle_y_type right_ankle_y;

   typedef float _left_ankle_x_type;
  _left_ankle_x_type left_ankle_x;

   typedef float _left_ankle_y_type;
  _left_ankle_y_type left_ankle_y;

   typedef float _right_eye_x_type;
  _right_eye_x_type right_eye_x;

   typedef float _right_eye_y_type;
  _right_eye_y_type right_eye_y;

   typedef float _left_eye_x_type;
  _left_eye_x_type left_eye_x;

   typedef float _left_eye_y_type;
  _left_eye_y_type left_eye_y;

   typedef float _right_ear_x_type;
  _right_ear_x_type right_ear_x;

   typedef float _right_ear_y_type;
  _right_ear_y_type right_ear_y;

   typedef float _left_ear_x_type;
  _left_ear_x_type left_ear_x;

   typedef float _left_ear_y_type;
  _left_ear_y_type left_ear_y;





  typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> const> ConstPtr;

}; // struct Keypoints_

typedef ::rail_pose_estimation_msgs::Keypoints_<std::allocator<void> > Keypoints;

typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Keypoints > KeypointsPtr;
typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Keypoints const> KeypointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator1> & lhs, const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator2> & rhs)
{
  return lhs.neck_x == rhs.neck_x &&
    lhs.neck_y == rhs.neck_y &&
    lhs.nose_x == rhs.nose_x &&
    lhs.nose_y == rhs.nose_y &&
    lhs.right_shoulder_x == rhs.right_shoulder_x &&
    lhs.right_shoulder_y == rhs.right_shoulder_y &&
    lhs.left_shoulder_x == rhs.left_shoulder_x &&
    lhs.left_shoulder_y == rhs.left_shoulder_y &&
    lhs.right_elbow_x == rhs.right_elbow_x &&
    lhs.right_elbow_y == rhs.right_elbow_y &&
    lhs.left_elbow_x == rhs.left_elbow_x &&
    lhs.left_elbow_y == rhs.left_elbow_y &&
    lhs.right_wrist_x == rhs.right_wrist_x &&
    lhs.right_wrist_y == rhs.right_wrist_y &&
    lhs.left_wrist_x == rhs.left_wrist_x &&
    lhs.left_wrist_y == rhs.left_wrist_y &&
    lhs.right_hip_x == rhs.right_hip_x &&
    lhs.right_hip_y == rhs.right_hip_y &&
    lhs.left_hip_x == rhs.left_hip_x &&
    lhs.left_hip_y == rhs.left_hip_y &&
    lhs.right_knee_x == rhs.right_knee_x &&
    lhs.right_knee_y == rhs.right_knee_y &&
    lhs.left_knee_x == rhs.left_knee_x &&
    lhs.left_knee_y == rhs.left_knee_y &&
    lhs.right_ankle_x == rhs.right_ankle_x &&
    lhs.right_ankle_y == rhs.right_ankle_y &&
    lhs.left_ankle_x == rhs.left_ankle_x &&
    lhs.left_ankle_y == rhs.left_ankle_y &&
    lhs.right_eye_x == rhs.right_eye_x &&
    lhs.right_eye_y == rhs.right_eye_y &&
    lhs.left_eye_x == rhs.left_eye_x &&
    lhs.left_eye_y == rhs.left_eye_y &&
    lhs.right_ear_x == rhs.right_ear_x &&
    lhs.right_ear_y == rhs.right_ear_y &&
    lhs.left_ear_x == rhs.left_ear_x &&
    lhs.left_ear_y == rhs.left_ear_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator1> & lhs, const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_pose_estimation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d1804a99352b413ee0c9ca364640114";
  }

  static const char* value(const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d1804a99352b413ULL;
  static const uint64_t static_value2 = 0xee0c9ca364640114ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_pose_estimation_msgs/Keypoints";
  }

  static const char* value(const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 neck_x                  # x coord of neck\n"
"float32 neck_y                  # y coord of neck\n"
"float32 nose_x                  # x coord of nose\n"
"float32 nose_y                  # y coord of nose\n"
"float32 right_shoulder_x        # x coord of right shoulder\n"
"float32 right_shoulder_y        # y coord of right shoulder\n"
"float32 left_shoulder_x         # x coord of left shoulder\n"
"float32 left_shoulder_y         # y coord of left shoulder\n"
"float32 right_elbow_x           # x coord of right elbow\n"
"float32 right_elbow_y           # y coord of right elbow\n"
"float32 left_elbow_x            # x coord of left elbow\n"
"float32 left_elbow_y            # y coord of left elbow\n"
"float32 right_wrist_x           # x coord of right wrist\n"
"float32 right_wrist_y           # y coord of right wrist\n"
"float32 left_wrist_x            # x coord of left wrist\n"
"float32 left_wrist_y            # y coord of left wrist\n"
"float32 right_hip_x             # x coord of right hip\n"
"float32 right_hip_y             # y coord of right hip\n"
"float32 left_hip_x              # x coord of left hip\n"
"float32 left_hip_y              # y coord of left hip\n"
"float32 right_knee_x            # x coord of right knee\n"
"float32 right_knee_y            # y coord of right knee\n"
"float32 left_knee_x             # x coord of left knee\n"
"float32 left_knee_y             # y coord of left knee\n"
"float32 right_ankle_x           # x coord of right ankle\n"
"float32 right_ankle_y           # y coord of right ankle\n"
"float32 left_ankle_x            # x coord of left ankle\n"
"float32 left_ankle_y            # y coord of left ankle\n"
"float32 right_eye_x             # x coord of right eye\n"
"float32 right_eye_y             # y coord of right eye\n"
"float32 left_eye_x              # x coord of left eye\n"
"float32 left_eye_y              # y coord of left eye\n"
"float32 right_ear_x             # x coord of right ear\n"
"float32 right_ear_y             # y coord of right ear\n"
"float32 left_ear_x              # x coord of left ear\n"
"float32 left_ear_y              # y coord of left ear\n"
;
  }

  static const char* value(const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.neck_x);
      stream.next(m.neck_y);
      stream.next(m.nose_x);
      stream.next(m.nose_y);
      stream.next(m.right_shoulder_x);
      stream.next(m.right_shoulder_y);
      stream.next(m.left_shoulder_x);
      stream.next(m.left_shoulder_y);
      stream.next(m.right_elbow_x);
      stream.next(m.right_elbow_y);
      stream.next(m.left_elbow_x);
      stream.next(m.left_elbow_y);
      stream.next(m.right_wrist_x);
      stream.next(m.right_wrist_y);
      stream.next(m.left_wrist_x);
      stream.next(m.left_wrist_y);
      stream.next(m.right_hip_x);
      stream.next(m.right_hip_y);
      stream.next(m.left_hip_x);
      stream.next(m.left_hip_y);
      stream.next(m.right_knee_x);
      stream.next(m.right_knee_y);
      stream.next(m.left_knee_x);
      stream.next(m.left_knee_y);
      stream.next(m.right_ankle_x);
      stream.next(m.right_ankle_y);
      stream.next(m.left_ankle_x);
      stream.next(m.left_ankle_y);
      stream.next(m.right_eye_x);
      stream.next(m.right_eye_y);
      stream.next(m.left_eye_x);
      stream.next(m.left_eye_y);
      stream.next(m.right_ear_x);
      stream.next(m.right_ear_y);
      stream.next(m.left_ear_x);
      stream.next(m.left_ear_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Keypoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator>& v)
  {
    s << indent << "neck_x: ";
    Printer<float>::stream(s, indent + "  ", v.neck_x);
    s << indent << "neck_y: ";
    Printer<float>::stream(s, indent + "  ", v.neck_y);
    s << indent << "nose_x: ";
    Printer<float>::stream(s, indent + "  ", v.nose_x);
    s << indent << "nose_y: ";
    Printer<float>::stream(s, indent + "  ", v.nose_y);
    s << indent << "right_shoulder_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_shoulder_x);
    s << indent << "right_shoulder_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_shoulder_y);
    s << indent << "left_shoulder_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_shoulder_x);
    s << indent << "left_shoulder_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_shoulder_y);
    s << indent << "right_elbow_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_elbow_x);
    s << indent << "right_elbow_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_elbow_y);
    s << indent << "left_elbow_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_elbow_x);
    s << indent << "left_elbow_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_elbow_y);
    s << indent << "right_wrist_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_wrist_x);
    s << indent << "right_wrist_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_wrist_y);
    s << indent << "left_wrist_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_wrist_x);
    s << indent << "left_wrist_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_wrist_y);
    s << indent << "right_hip_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_x);
    s << indent << "right_hip_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_y);
    s << indent << "left_hip_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_x);
    s << indent << "left_hip_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_y);
    s << indent << "right_knee_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_knee_x);
    s << indent << "right_knee_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_knee_y);
    s << indent << "left_knee_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_knee_x);
    s << indent << "left_knee_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_knee_y);
    s << indent << "right_ankle_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_ankle_x);
    s << indent << "right_ankle_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_ankle_y);
    s << indent << "left_ankle_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_ankle_x);
    s << indent << "left_ankle_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_ankle_y);
    s << indent << "right_eye_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_eye_x);
    s << indent << "right_eye_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_eye_y);
    s << indent << "left_eye_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_eye_x);
    s << indent << "left_eye_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_eye_y);
    s << indent << "right_ear_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_ear_x);
    s << indent << "right_ear_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_ear_y);
    s << indent << "left_ear_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_ear_x);
    s << indent << "left_ear_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_ear_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_POSE_ESTIMATION_MSGS_MESSAGE_KEYPOINTS_H
