// Generated by gencpp from file rail_pose_estimation_msgs/Poses.msg
// DO NOT EDIT!


#ifndef RAIL_POSE_ESTIMATION_MSGS_MESSAGE_POSES_H
#define RAIL_POSE_ESTIMATION_MSGS_MESSAGE_POSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rail_pose_estimation_msgs/Keypoints.h>

namespace rail_pose_estimation_msgs
{
template <class ContainerAllocator>
struct Poses_
{
  typedef Poses_<ContainerAllocator> Type;

  Poses_()
    : header()
    , people()  {
    }
  Poses_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , people(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >::other >  _people_type;
  _people_type people;





  typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> const> ConstPtr;

}; // struct Poses_

typedef ::rail_pose_estimation_msgs::Poses_<std::allocator<void> > Poses;

typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Poses > PosesPtr;
typedef boost::shared_ptr< ::rail_pose_estimation_msgs::Poses const> PosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator1> & lhs, const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.people == rhs.people;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator1> & lhs, const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_pose_estimation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3ac5a5326099357214a8296eb96e5d2";
  }

  static const char* value(const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3ac5a5326099357ULL;
  static const uint64_t static_value2 = 0x214a8296eb96e5d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_pose_estimation_msgs/Poses";
  }

  static const char* value(const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header 	# Message header including timestamp of detection & img frame\n"
"Keypoints[] people 			# Array of detected objects\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rail_pose_estimation_msgs/Keypoints\n"
"float32 neck_x                  # x coord of neck\n"
"float32 neck_y                  # y coord of neck\n"
"float32 nose_x                  # x coord of nose\n"
"float32 nose_y                  # y coord of nose\n"
"float32 right_shoulder_x        # x coord of right shoulder\n"
"float32 right_shoulder_y        # y coord of right shoulder\n"
"float32 left_shoulder_x         # x coord of left shoulder\n"
"float32 left_shoulder_y         # y coord of left shoulder\n"
"float32 right_elbow_x           # x coord of right elbow\n"
"float32 right_elbow_y           # y coord of right elbow\n"
"float32 left_elbow_x            # x coord of left elbow\n"
"float32 left_elbow_y            # y coord of left elbow\n"
"float32 right_wrist_x           # x coord of right wrist\n"
"float32 right_wrist_y           # y coord of right wrist\n"
"float32 left_wrist_x            # x coord of left wrist\n"
"float32 left_wrist_y            # y coord of left wrist\n"
"float32 right_hip_x             # x coord of right hip\n"
"float32 right_hip_y             # y coord of right hip\n"
"float32 left_hip_x              # x coord of left hip\n"
"float32 left_hip_y              # y coord of left hip\n"
"float32 right_knee_x            # x coord of right knee\n"
"float32 right_knee_y            # y coord of right knee\n"
"float32 left_knee_x             # x coord of left knee\n"
"float32 left_knee_y             # y coord of left knee\n"
"float32 right_ankle_x           # x coord of right ankle\n"
"float32 right_ankle_y           # y coord of right ankle\n"
"float32 left_ankle_x            # x coord of left ankle\n"
"float32 left_ankle_y            # y coord of left ankle\n"
"float32 right_eye_x             # x coord of right eye\n"
"float32 right_eye_y             # y coord of right eye\n"
"float32 left_eye_x              # x coord of left eye\n"
"float32 left_eye_y              # y coord of left eye\n"
"float32 right_ear_x             # x coord of right ear\n"
"float32 right_ear_y             # y coord of right ear\n"
"float32 left_ear_x              # x coord of left ear\n"
"float32 left_ear_y              # y coord of left ear\n"
;
  }

  static const char* value(const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.people);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Poses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_pose_estimation_msgs::Poses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_pose_estimation_msgs::Poses_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "people[]" << std::endl;
    for (size_t i = 0; i < v.people.size(); ++i)
    {
      s << indent << "  people[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rail_pose_estimation_msgs::Keypoints_<ContainerAllocator> >::stream(s, indent + "    ", v.people[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_POSE_ESTIMATION_MSGS_MESSAGE_POSES_H
