# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rail_pose_estimation_msgs/Poses.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rail_pose_estimation_msgs.msg
import std_msgs.msg

class Poses(genpy.Message):
  _md5sum = "f3ac5a5326099357214a8296eb96e5d2"
  _type = "rail_pose_estimation_msgs/Poses"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header 	# Message header including timestamp of detection & img frame
Keypoints[] people 			# Array of detected objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rail_pose_estimation_msgs/Keypoints
float32 neck_x                  # x coord of neck
float32 neck_y                  # y coord of neck
float32 nose_x                  # x coord of nose
float32 nose_y                  # y coord of nose
float32 right_shoulder_x        # x coord of right shoulder
float32 right_shoulder_y        # y coord of right shoulder
float32 left_shoulder_x         # x coord of left shoulder
float32 left_shoulder_y         # y coord of left shoulder
float32 right_elbow_x           # x coord of right elbow
float32 right_elbow_y           # y coord of right elbow
float32 left_elbow_x            # x coord of left elbow
float32 left_elbow_y            # y coord of left elbow
float32 right_wrist_x           # x coord of right wrist
float32 right_wrist_y           # y coord of right wrist
float32 left_wrist_x            # x coord of left wrist
float32 left_wrist_y            # y coord of left wrist
float32 right_hip_x             # x coord of right hip
float32 right_hip_y             # y coord of right hip
float32 left_hip_x              # x coord of left hip
float32 left_hip_y              # y coord of left hip
float32 right_knee_x            # x coord of right knee
float32 right_knee_y            # y coord of right knee
float32 left_knee_x             # x coord of left knee
float32 left_knee_y             # y coord of left knee
float32 right_ankle_x           # x coord of right ankle
float32 right_ankle_y           # y coord of right ankle
float32 left_ankle_x            # x coord of left ankle
float32 left_ankle_y            # y coord of left ankle
float32 right_eye_x             # x coord of right eye
float32 right_eye_y             # y coord of right eye
float32 left_eye_x              # x coord of left eye
float32 left_eye_y              # y coord of left eye
float32 right_ear_x             # x coord of right ear
float32 right_ear_y             # y coord of right ear
float32 left_ear_x              # x coord of left ear
float32 left_ear_y              # y coord of left ear"""
  __slots__ = ['header','people']
  _slot_types = ['std_msgs/Header','rail_pose_estimation_msgs/Keypoints[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,people

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Poses, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.people is None:
        self.people = []
    else:
      self.header = std_msgs.msg.Header()
      self.people = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.people)
      buff.write(_struct_I.pack(length))
      for val1 in self.people:
        _x = val1
        buff.write(_get_struct_36f().pack(_x.neck_x, _x.neck_y, _x.nose_x, _x.nose_y, _x.right_shoulder_x, _x.right_shoulder_y, _x.left_shoulder_x, _x.left_shoulder_y, _x.right_elbow_x, _x.right_elbow_y, _x.left_elbow_x, _x.left_elbow_y, _x.right_wrist_x, _x.right_wrist_y, _x.left_wrist_x, _x.left_wrist_y, _x.right_hip_x, _x.right_hip_y, _x.left_hip_x, _x.left_hip_y, _x.right_knee_x, _x.right_knee_y, _x.left_knee_x, _x.left_knee_y, _x.right_ankle_x, _x.right_ankle_y, _x.left_ankle_x, _x.left_ankle_y, _x.right_eye_x, _x.right_eye_y, _x.left_eye_x, _x.left_eye_y, _x.right_ear_x, _x.right_ear_y, _x.left_ear_x, _x.left_ear_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.people is None:
        self.people = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.people = []
      for i in range(0, length):
        val1 = rail_pose_estimation_msgs.msg.Keypoints()
        _x = val1
        start = end
        end += 144
        (_x.neck_x, _x.neck_y, _x.nose_x, _x.nose_y, _x.right_shoulder_x, _x.right_shoulder_y, _x.left_shoulder_x, _x.left_shoulder_y, _x.right_elbow_x, _x.right_elbow_y, _x.left_elbow_x, _x.left_elbow_y, _x.right_wrist_x, _x.right_wrist_y, _x.left_wrist_x, _x.left_wrist_y, _x.right_hip_x, _x.right_hip_y, _x.left_hip_x, _x.left_hip_y, _x.right_knee_x, _x.right_knee_y, _x.left_knee_x, _x.left_knee_y, _x.right_ankle_x, _x.right_ankle_y, _x.left_ankle_x, _x.left_ankle_y, _x.right_eye_x, _x.right_eye_y, _x.left_eye_x, _x.left_eye_y, _x.right_ear_x, _x.right_ear_y, _x.left_ear_x, _x.left_ear_y,) = _get_struct_36f().unpack(str[start:end])
        self.people.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.people)
      buff.write(_struct_I.pack(length))
      for val1 in self.people:
        _x = val1
        buff.write(_get_struct_36f().pack(_x.neck_x, _x.neck_y, _x.nose_x, _x.nose_y, _x.right_shoulder_x, _x.right_shoulder_y, _x.left_shoulder_x, _x.left_shoulder_y, _x.right_elbow_x, _x.right_elbow_y, _x.left_elbow_x, _x.left_elbow_y, _x.right_wrist_x, _x.right_wrist_y, _x.left_wrist_x, _x.left_wrist_y, _x.right_hip_x, _x.right_hip_y, _x.left_hip_x, _x.left_hip_y, _x.right_knee_x, _x.right_knee_y, _x.left_knee_x, _x.left_knee_y, _x.right_ankle_x, _x.right_ankle_y, _x.left_ankle_x, _x.left_ankle_y, _x.right_eye_x, _x.right_eye_y, _x.left_eye_x, _x.left_eye_y, _x.right_ear_x, _x.right_ear_y, _x.left_ear_x, _x.left_ear_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.people is None:
        self.people = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.people = []
      for i in range(0, length):
        val1 = rail_pose_estimation_msgs.msg.Keypoints()
        _x = val1
        start = end
        end += 144
        (_x.neck_x, _x.neck_y, _x.nose_x, _x.nose_y, _x.right_shoulder_x, _x.right_shoulder_y, _x.left_shoulder_x, _x.left_shoulder_y, _x.right_elbow_x, _x.right_elbow_y, _x.left_elbow_x, _x.left_elbow_y, _x.right_wrist_x, _x.right_wrist_y, _x.left_wrist_x, _x.left_wrist_y, _x.right_hip_x, _x.right_hip_y, _x.left_hip_x, _x.left_hip_y, _x.right_knee_x, _x.right_knee_y, _x.left_knee_x, _x.left_knee_y, _x.right_ankle_x, _x.right_ankle_y, _x.left_ankle_x, _x.left_ankle_y, _x.right_eye_x, _x.right_eye_y, _x.left_eye_x, _x.left_eye_y, _x.right_ear_x, _x.right_ear_y, _x.left_ear_x, _x.left_ear_y,) = _get_struct_36f().unpack(str[start:end])
        self.people.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36f = None
def _get_struct_36f():
    global _struct_36f
    if _struct_36f is None:
        _struct_36f = struct.Struct("<36f")
    return _struct_36f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
