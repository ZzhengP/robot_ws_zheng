// Generated by gencpp from file openni2_tracker/TrackerUser.msg
// DO NOT EDIT!


#ifndef OPENNI2_TRACKER_MESSAGE_TRACKERUSER_H
#define OPENNI2_TRACKER_MESSAGE_TRACKERUSER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace openni2_tracker
{
template <class ContainerAllocator>
struct TrackerUser_
{
  typedef TrackerUser_<ContainerAllocator> Type;

  TrackerUser_()
    : header()
    , uid(0)
    , tracker_id()
    , frames()
    , confs()
    , transforms()
    , projective()
    , center_of_mass()  {
    }
  TrackerUser_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uid(0)
    , tracker_id(_alloc)
    , frames(_alloc)
    , confs(_alloc)
    , transforms(_alloc)
    , projective(_alloc)
    , center_of_mass(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _uid_type;
  _uid_type uid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tracker_id_type;
  _tracker_id_type tracker_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _frames_type;
  _frames_type frames;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _confs_type;
  _confs_type confs;

   typedef std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  _transforms_type;
  _transforms_type transforms;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _projective_type;
  _projective_type projective;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _center_of_mass_type;
  _center_of_mass_type center_of_mass;





  typedef boost::shared_ptr< ::openni2_tracker::TrackerUser_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openni2_tracker::TrackerUser_<ContainerAllocator> const> ConstPtr;

}; // struct TrackerUser_

typedef ::openni2_tracker::TrackerUser_<std::allocator<void> > TrackerUser;

typedef boost::shared_ptr< ::openni2_tracker::TrackerUser > TrackerUserPtr;
typedef boost::shared_ptr< ::openni2_tracker::TrackerUser const> TrackerUserConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openni2_tracker::TrackerUser_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openni2_tracker::TrackerUser_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace openni2_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'openni2_tracker': ['/home/zheng/robot_ws_zheng/src/openni2_tracker/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openni2_tracker::TrackerUser_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openni2_tracker::TrackerUser_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openni2_tracker::TrackerUser_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4f1e9a80fc94f2519473798dffa838a";
  }

  static const char* value(const ::openni2_tracker::TrackerUser_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4f1e9a80fc94f25ULL;
  static const uint64_t static_value2 = 0x19473798dffa838aULL;
};

template<class ContainerAllocator>
struct DataType< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openni2_tracker/TrackerUser";
  }

  static const char* value(const ::openni2_tracker::TrackerUser_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# TrackerUser: Contains a snapshot of a single users tracking data. an ID, a vector of frames corresponding to each joint, a vector of confidences corresponding to each joint, and a vector of geometry_msgs/Transform messages corresponding to each joint. \n"
"Header header\n"
"uint8 uid\n"
"string tracker_id\n"
"string[] frames\n"
"float64[] confs\n"
"geometry_msgs/Transform[] transforms\n"
"geometry_msgs/Vector3[] projective\n"
"geometry_msgs/Vector3 center_of_mass\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::openni2_tracker::TrackerUser_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uid);
      stream.next(m.tracker_id);
      stream.next(m.frames);
      stream.next(m.confs);
      stream.next(m.transforms);
      stream.next(m.projective);
      stream.next(m.center_of_mass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackerUser_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openni2_tracker::TrackerUser_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openni2_tracker::TrackerUser_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uid);
    s << indent << "tracker_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tracker_id);
    s << indent << "frames[]" << std::endl;
    for (size_t i = 0; i < v.frames.size(); ++i)
    {
      s << indent << "  frames[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frames[i]);
    }
    s << indent << "confs[]" << std::endl;
    for (size_t i = 0; i < v.confs.size(); ++i)
    {
      s << indent << "  confs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.confs[i]);
    }
    s << indent << "transforms[]" << std::endl;
    for (size_t i = 0; i < v.transforms.size(); ++i)
    {
      s << indent << "  transforms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.transforms[i]);
    }
    s << indent << "projective[]" << std::endl;
    for (size_t i = 0; i < v.projective.size(); ++i)
    {
      s << indent << "  projective[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.projective[i]);
    }
    s << indent << "center_of_mass: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.center_of_mass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENNI2_TRACKER_MESSAGE_TRACKERUSER_H
