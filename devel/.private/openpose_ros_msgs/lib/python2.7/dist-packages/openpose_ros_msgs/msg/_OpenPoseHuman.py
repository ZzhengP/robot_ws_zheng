# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from openpose_ros_msgs/OpenPoseHuman.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import openpose_ros_msgs.msg

class OpenPoseHuman(genpy.Message):
  _md5sum = "4e291ca1063e4a96ca852f33fa35d22b"
  _type = "openpose_ros_msgs/OpenPoseHuman"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 num_body_key_points_with_non_zero_prob
int32 num_face_key_points_with_non_zero_prob
int32 num_right_hand_key_points_with_non_zero_prob
int32 num_left_hand_key_points_with_non_zero_prob
BoundingBox body_bounding_box
BoundingBox face_bounding_box
PointWithProb[25] body_key_points_with_prob
PointWithProb[70] face_key_points_with_prob
PointWithProb[21] right_hand_key_points_with_prob
PointWithProb[21] left_hand_key_points_with_prob
================================================================================
MSG: openpose_ros_msgs/BoundingBox
float64 x
float64 y
float64 width
float64 height
================================================================================
MSG: openpose_ros_msgs/PointWithProb
float64 x
float64 y
float64 prob"""
  __slots__ = ['num_body_key_points_with_non_zero_prob','num_face_key_points_with_non_zero_prob','num_right_hand_key_points_with_non_zero_prob','num_left_hand_key_points_with_non_zero_prob','body_bounding_box','face_bounding_box','body_key_points_with_prob','face_key_points_with_prob','right_hand_key_points_with_prob','left_hand_key_points_with_prob']
  _slot_types = ['int32','int32','int32','int32','openpose_ros_msgs/BoundingBox','openpose_ros_msgs/BoundingBox','openpose_ros_msgs/PointWithProb[25]','openpose_ros_msgs/PointWithProb[70]','openpose_ros_msgs/PointWithProb[21]','openpose_ros_msgs/PointWithProb[21]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num_body_key_points_with_non_zero_prob,num_face_key_points_with_non_zero_prob,num_right_hand_key_points_with_non_zero_prob,num_left_hand_key_points_with_non_zero_prob,body_bounding_box,face_bounding_box,body_key_points_with_prob,face_key_points_with_prob,right_hand_key_points_with_prob,left_hand_key_points_with_prob

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OpenPoseHuman, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num_body_key_points_with_non_zero_prob is None:
        self.num_body_key_points_with_non_zero_prob = 0
      if self.num_face_key_points_with_non_zero_prob is None:
        self.num_face_key_points_with_non_zero_prob = 0
      if self.num_right_hand_key_points_with_non_zero_prob is None:
        self.num_right_hand_key_points_with_non_zero_prob = 0
      if self.num_left_hand_key_points_with_non_zero_prob is None:
        self.num_left_hand_key_points_with_non_zero_prob = 0
      if self.body_bounding_box is None:
        self.body_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      if self.face_bounding_box is None:
        self.face_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      if self.body_key_points_with_prob is None:
        self.body_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(25)]
      if self.face_key_points_with_prob is None:
        self.face_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(70)]
      if self.right_hand_key_points_with_prob is None:
        self.right_hand_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(21)]
      if self.left_hand_key_points_with_prob is None:
        self.left_hand_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(21)]
    else:
      self.num_body_key_points_with_non_zero_prob = 0
      self.num_face_key_points_with_non_zero_prob = 0
      self.num_right_hand_key_points_with_non_zero_prob = 0
      self.num_left_hand_key_points_with_non_zero_prob = 0
      self.body_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      self.face_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      self.body_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(25)]
      self.face_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(70)]
      self.right_hand_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(21)]
      self.left_hand_key_points_with_prob = [openpose_ros_msgs.msg.PointWithProb() for _ in range(21)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i8d().pack(_x.num_body_key_points_with_non_zero_prob, _x.num_face_key_points_with_non_zero_prob, _x.num_right_hand_key_points_with_non_zero_prob, _x.num_left_hand_key_points_with_non_zero_prob, _x.body_bounding_box.x, _x.body_bounding_box.y, _x.body_bounding_box.width, _x.body_bounding_box.height, _x.face_bounding_box.x, _x.face_bounding_box.y, _x.face_bounding_box.width, _x.face_bounding_box.height))
      if len(self.body_key_points_with_prob) != 25:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (25, len(self.body_key_points_with_prob), 'self.body_key_points_with_prob')))
      for val1 in self.body_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
      if len(self.face_key_points_with_prob) != 70:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (70, len(self.face_key_points_with_prob), 'self.face_key_points_with_prob')))
      for val1 in self.face_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
      if len(self.right_hand_key_points_with_prob) != 21:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (21, len(self.right_hand_key_points_with_prob), 'self.right_hand_key_points_with_prob')))
      for val1 in self.right_hand_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
      if len(self.left_hand_key_points_with_prob) != 21:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (21, len(self.left_hand_key_points_with_prob), 'self.left_hand_key_points_with_prob')))
      for val1 in self.left_hand_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.body_bounding_box is None:
        self.body_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      if self.face_bounding_box is None:
        self.face_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      if self.body_key_points_with_prob is None:
        self.body_key_points_with_prob = None
      if self.face_key_points_with_prob is None:
        self.face_key_points_with_prob = None
      if self.right_hand_key_points_with_prob is None:
        self.right_hand_key_points_with_prob = None
      if self.left_hand_key_points_with_prob is None:
        self.left_hand_key_points_with_prob = None
      end = 0
      _x = self
      start = end
      end += 80
      (_x.num_body_key_points_with_non_zero_prob, _x.num_face_key_points_with_non_zero_prob, _x.num_right_hand_key_points_with_non_zero_prob, _x.num_left_hand_key_points_with_non_zero_prob, _x.body_bounding_box.x, _x.body_bounding_box.y, _x.body_bounding_box.width, _x.body_bounding_box.height, _x.face_bounding_box.x, _x.face_bounding_box.y, _x.face_bounding_box.width, _x.face_bounding_box.height,) = _get_struct_4i8d().unpack(str[start:end])
      self.body_key_points_with_prob = []
      for i in range(0, 25):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.body_key_points_with_prob.append(val1)
      self.face_key_points_with_prob = []
      for i in range(0, 70):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.face_key_points_with_prob.append(val1)
      self.right_hand_key_points_with_prob = []
      for i in range(0, 21):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.right_hand_key_points_with_prob.append(val1)
      self.left_hand_key_points_with_prob = []
      for i in range(0, 21):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.left_hand_key_points_with_prob.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i8d().pack(_x.num_body_key_points_with_non_zero_prob, _x.num_face_key_points_with_non_zero_prob, _x.num_right_hand_key_points_with_non_zero_prob, _x.num_left_hand_key_points_with_non_zero_prob, _x.body_bounding_box.x, _x.body_bounding_box.y, _x.body_bounding_box.width, _x.body_bounding_box.height, _x.face_bounding_box.x, _x.face_bounding_box.y, _x.face_bounding_box.width, _x.face_bounding_box.height))
      if len(self.body_key_points_with_prob) != 25:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (25, len(self.body_key_points_with_prob), 'self.body_key_points_with_prob')))
      for val1 in self.body_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
      if len(self.face_key_points_with_prob) != 70:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (70, len(self.face_key_points_with_prob), 'self.face_key_points_with_prob')))
      for val1 in self.face_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
      if len(self.right_hand_key_points_with_prob) != 21:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (21, len(self.right_hand_key_points_with_prob), 'self.right_hand_key_points_with_prob')))
      for val1 in self.right_hand_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
      if len(self.left_hand_key_points_with_prob) != 21:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (21, len(self.left_hand_key_points_with_prob), 'self.left_hand_key_points_with_prob')))
      for val1 in self.left_hand_key_points_with_prob:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.prob))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.body_bounding_box is None:
        self.body_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      if self.face_bounding_box is None:
        self.face_bounding_box = openpose_ros_msgs.msg.BoundingBox()
      if self.body_key_points_with_prob is None:
        self.body_key_points_with_prob = None
      if self.face_key_points_with_prob is None:
        self.face_key_points_with_prob = None
      if self.right_hand_key_points_with_prob is None:
        self.right_hand_key_points_with_prob = None
      if self.left_hand_key_points_with_prob is None:
        self.left_hand_key_points_with_prob = None
      end = 0
      _x = self
      start = end
      end += 80
      (_x.num_body_key_points_with_non_zero_prob, _x.num_face_key_points_with_non_zero_prob, _x.num_right_hand_key_points_with_non_zero_prob, _x.num_left_hand_key_points_with_non_zero_prob, _x.body_bounding_box.x, _x.body_bounding_box.y, _x.body_bounding_box.width, _x.body_bounding_box.height, _x.face_bounding_box.x, _x.face_bounding_box.y, _x.face_bounding_box.width, _x.face_bounding_box.height,) = _get_struct_4i8d().unpack(str[start:end])
      self.body_key_points_with_prob = []
      for i in range(0, 25):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.body_key_points_with_prob.append(val1)
      self.face_key_points_with_prob = []
      for i in range(0, 70):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.face_key_points_with_prob.append(val1)
      self.right_hand_key_points_with_prob = []
      for i in range(0, 21):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.right_hand_key_points_with_prob.append(val1)
      self.left_hand_key_points_with_prob = []
      for i in range(0, 21):
        val1 = openpose_ros_msgs.msg.PointWithProb()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.prob,) = _get_struct_3d().unpack(str[start:end])
        self.left_hand_key_points_with_prob.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i8d = None
def _get_struct_4i8d():
    global _struct_4i8d
    if _struct_4i8d is None:
        _struct_4i8d = struct.Struct("<4i8d")
    return _struct_4i8d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
