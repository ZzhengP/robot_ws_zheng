// Generated by gencpp from file openpose_ros_msgs/OpenPoseHuman.msg
// DO NOT EDIT!


#ifndef OPENPOSE_ROS_MSGS_MESSAGE_OPENPOSEHUMAN_H
#define OPENPOSE_ROS_MSGS_MESSAGE_OPENPOSEHUMAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <openpose_ros_msgs/BoundingBox.h>
#include <openpose_ros_msgs/BoundingBox.h>
#include <openpose_ros_msgs/PointWithProb.h>
#include <openpose_ros_msgs/PointWithProb.h>
#include <openpose_ros_msgs/PointWithProb.h>
#include <openpose_ros_msgs/PointWithProb.h>

namespace openpose_ros_msgs
{
template <class ContainerAllocator>
struct OpenPoseHuman_
{
  typedef OpenPoseHuman_<ContainerAllocator> Type;

  OpenPoseHuman_()
    : num_body_key_points_with_non_zero_prob(0)
    , num_face_key_points_with_non_zero_prob(0)
    , num_right_hand_key_points_with_non_zero_prob(0)
    , num_left_hand_key_points_with_non_zero_prob(0)
    , body_bounding_box()
    , face_bounding_box()
    , body_key_points_with_prob()
    , face_key_points_with_prob()
    , right_hand_key_points_with_prob()
    , left_hand_key_points_with_prob()  {
    }
  OpenPoseHuman_(const ContainerAllocator& _alloc)
    : num_body_key_points_with_non_zero_prob(0)
    , num_face_key_points_with_non_zero_prob(0)
    , num_right_hand_key_points_with_non_zero_prob(0)
    , num_left_hand_key_points_with_non_zero_prob(0)
    , body_bounding_box(_alloc)
    , face_bounding_box(_alloc)
    , body_key_points_with_prob()
    , face_key_points_with_prob()
    , right_hand_key_points_with_prob()
    , left_hand_key_points_with_prob()  {
  (void)_alloc;
      body_key_points_with_prob.assign( ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> (_alloc));

      face_key_points_with_prob.assign( ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> (_alloc));

      right_hand_key_points_with_prob.assign( ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> (_alloc));

      left_hand_key_points_with_prob.assign( ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> (_alloc));
  }



   typedef int32_t _num_body_key_points_with_non_zero_prob_type;
  _num_body_key_points_with_non_zero_prob_type num_body_key_points_with_non_zero_prob;

   typedef int32_t _num_face_key_points_with_non_zero_prob_type;
  _num_face_key_points_with_non_zero_prob_type num_face_key_points_with_non_zero_prob;

   typedef int32_t _num_right_hand_key_points_with_non_zero_prob_type;
  _num_right_hand_key_points_with_non_zero_prob_type num_right_hand_key_points_with_non_zero_prob;

   typedef int32_t _num_left_hand_key_points_with_non_zero_prob_type;
  _num_left_hand_key_points_with_non_zero_prob_type num_left_hand_key_points_with_non_zero_prob;

   typedef  ::openpose_ros_msgs::BoundingBox_<ContainerAllocator>  _body_bounding_box_type;
  _body_bounding_box_type body_bounding_box;

   typedef  ::openpose_ros_msgs::BoundingBox_<ContainerAllocator>  _face_bounding_box_type;
  _face_bounding_box_type face_bounding_box;

   typedef boost::array< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> , 25>  _body_key_points_with_prob_type;
  _body_key_points_with_prob_type body_key_points_with_prob;

   typedef boost::array< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> , 70>  _face_key_points_with_prob_type;
  _face_key_points_with_prob_type face_key_points_with_prob;

   typedef boost::array< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> , 21>  _right_hand_key_points_with_prob_type;
  _right_hand_key_points_with_prob_type right_hand_key_points_with_prob;

   typedef boost::array< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> , 21>  _left_hand_key_points_with_prob_type;
  _left_hand_key_points_with_prob_type left_hand_key_points_with_prob;





  typedef boost::shared_ptr< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> const> ConstPtr;

}; // struct OpenPoseHuman_

typedef ::openpose_ros_msgs::OpenPoseHuman_<std::allocator<void> > OpenPoseHuman;

typedef boost::shared_ptr< ::openpose_ros_msgs::OpenPoseHuman > OpenPoseHumanPtr;
typedef boost::shared_ptr< ::openpose_ros_msgs::OpenPoseHuman const> OpenPoseHumanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace openpose_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'openpose_ros_msgs': ['/home/zheng/robot_ws_zheng/src/openpose_ros/openpose_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e291ca1063e4a96ca852f33fa35d22b";
  }

  static const char* value(const ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e291ca1063e4a96ULL;
  static const uint64_t static_value2 = 0xca852f33fa35d22bULL;
};

template<class ContainerAllocator>
struct DataType< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openpose_ros_msgs/OpenPoseHuman";
  }

  static const char* value(const ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 num_body_key_points_with_non_zero_prob\n"
"int32 num_face_key_points_with_non_zero_prob\n"
"int32 num_right_hand_key_points_with_non_zero_prob\n"
"int32 num_left_hand_key_points_with_non_zero_prob\n"
"BoundingBox body_bounding_box\n"
"BoundingBox face_bounding_box\n"
"PointWithProb[25] body_key_points_with_prob\n"
"PointWithProb[70] face_key_points_with_prob\n"
"PointWithProb[21] right_hand_key_points_with_prob\n"
"PointWithProb[21] left_hand_key_points_with_prob\n"
"================================================================================\n"
"MSG: openpose_ros_msgs/BoundingBox\n"
"float64 x\n"
"float64 y\n"
"float64 width\n"
"float64 height\n"
"================================================================================\n"
"MSG: openpose_ros_msgs/PointWithProb\n"
"float64 x\n"
"float64 y\n"
"float64 prob\n"
;
  }

  static const char* value(const ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_body_key_points_with_non_zero_prob);
      stream.next(m.num_face_key_points_with_non_zero_prob);
      stream.next(m.num_right_hand_key_points_with_non_zero_prob);
      stream.next(m.num_left_hand_key_points_with_non_zero_prob);
      stream.next(m.body_bounding_box);
      stream.next(m.face_bounding_box);
      stream.next(m.body_key_points_with_prob);
      stream.next(m.face_key_points_with_prob);
      stream.next(m.right_hand_key_points_with_prob);
      stream.next(m.left_hand_key_points_with_prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenPoseHuman_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openpose_ros_msgs::OpenPoseHuman_<ContainerAllocator>& v)
  {
    s << indent << "num_body_key_points_with_non_zero_prob: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_body_key_points_with_non_zero_prob);
    s << indent << "num_face_key_points_with_non_zero_prob: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_face_key_points_with_non_zero_prob);
    s << indent << "num_right_hand_key_points_with_non_zero_prob: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_right_hand_key_points_with_non_zero_prob);
    s << indent << "num_left_hand_key_points_with_non_zero_prob: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_left_hand_key_points_with_non_zero_prob);
    s << indent << "body_bounding_box: ";
    s << std::endl;
    Printer< ::openpose_ros_msgs::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.body_bounding_box);
    s << indent << "face_bounding_box: ";
    s << std::endl;
    Printer< ::openpose_ros_msgs::BoundingBox_<ContainerAllocator> >::stream(s, indent + "  ", v.face_bounding_box);
    s << indent << "body_key_points_with_prob[]" << std::endl;
    for (size_t i = 0; i < v.body_key_points_with_prob.size(); ++i)
    {
      s << indent << "  body_key_points_with_prob[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> >::stream(s, indent + "    ", v.body_key_points_with_prob[i]);
    }
    s << indent << "face_key_points_with_prob[]" << std::endl;
    for (size_t i = 0; i < v.face_key_points_with_prob.size(); ++i)
    {
      s << indent << "  face_key_points_with_prob[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> >::stream(s, indent + "    ", v.face_key_points_with_prob[i]);
    }
    s << indent << "right_hand_key_points_with_prob[]" << std::endl;
    for (size_t i = 0; i < v.right_hand_key_points_with_prob.size(); ++i)
    {
      s << indent << "  right_hand_key_points_with_prob[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> >::stream(s, indent + "    ", v.right_hand_key_points_with_prob[i]);
    }
    s << indent << "left_hand_key_points_with_prob[]" << std::endl;
    for (size_t i = 0; i < v.left_hand_key_points_with_prob.size(); ++i)
    {
      s << indent << "  left_hand_key_points_with_prob[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openpose_ros_msgs::PointWithProb_<ContainerAllocator> >::stream(s, indent + "    ", v.left_hand_key_points_with_prob[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENPOSE_ROS_MSGS_MESSAGE_OPENPOSEHUMAN_H
