// Generated by gencpp from file human_moveit_config/GetHumanIKRequest.msg
// DO NOT EDIT!


#ifndef HUMAN_MOVEIT_CONFIG_MESSAGE_GETHUMANIKREQUEST_H
#define HUMAN_MOVEIT_CONFIG_MESSAGE_GETHUMANIKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/JointState.h>

namespace human_moveit_config
{
template <class ContainerAllocator>
struct GetHumanIKRequest_
{
  typedef GetHumanIKRequest_<ContainerAllocator> Type;

  GetHumanIKRequest_()
    : desired_poses()
    , fixed_joints()
    , tolerance(0.0)
    , group_names()
    , seed()  {
    }
  GetHumanIKRequest_(const ContainerAllocator& _alloc)
    : desired_poses(_alloc)
    , fixed_joints(_alloc)
    , tolerance(0.0)
    , group_names(_alloc)
    , seed(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _desired_poses_type;
  _desired_poses_type desired_poses;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _fixed_joints_type;
  _fixed_joints_type fixed_joints;

   typedef float _tolerance_type;
  _tolerance_type tolerance;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _group_names_type;
  _group_names_type group_names;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _seed_type;
  _seed_type seed;





  typedef boost::shared_ptr< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetHumanIKRequest_

typedef ::human_moveit_config::GetHumanIKRequest_<std::allocator<void> > GetHumanIKRequest;

typedef boost::shared_ptr< ::human_moveit_config::GetHumanIKRequest > GetHumanIKRequestPtr;
typedef boost::shared_ptr< ::human_moveit_config::GetHumanIKRequest const> GetHumanIKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace human_moveit_config

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "570f111db5ed3535ac213f7c5fd26f8c";
  }

  static const char* value(const ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x570f111db5ed3535ULL;
  static const uint64_t static_value2 = 0xac213f7c5fd26f8cULL;
};

template<class ContainerAllocator>
struct DataType< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "human_moveit_config/GetHumanIKRequest";
  }

  static const char* value(const ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"geometry_msgs/PoseStamped[] desired_poses\n"
"sensor_msgs/JointState fixed_joints\n"
"float32 tolerance\n"
"string[] group_names\n"
"sensor_msgs/JointState seed\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
;
  }

  static const char* value(const ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_poses);
      stream.next(m.fixed_joints);
      stream.next(m.tolerance);
      stream.next(m.group_names);
      stream.next(m.seed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetHumanIKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::human_moveit_config::GetHumanIKRequest_<ContainerAllocator>& v)
  {
    s << indent << "desired_poses[]" << std::endl;
    for (size_t i = 0; i < v.desired_poses.size(); ++i)
    {
      s << indent << "  desired_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.desired_poses[i]);
    }
    s << indent << "fixed_joints: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.fixed_joints);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
    s << indent << "group_names[]" << std::endl;
    for (size_t i = 0; i < v.group_names.size(); ++i)
    {
      s << indent << "  group_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group_names[i]);
    }
    s << indent << "seed: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.seed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMAN_MOVEIT_CONFIG_MESSAGE_GETHUMANIKREQUEST_H
